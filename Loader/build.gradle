buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()

        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }

        maven {
            url = "https://plugins.gradle.org/m2"
        }

        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
		
    }

    dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.10"
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "idea"
apply plugin: "kotlin"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }

}


group = "cn.loli"
archivesBaseName = "Theresa"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = true
    // 告诉ide这里要添加一个参数
    clientJvmArgs += '-Dfml.coreMods.load=cn.loli.client.injection.MixinLoader'
}

dependencies {
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: "launchwrapper"
    }
    implementation 'org.jetbrains:annotations:15.0'
    implementation group: 'com.google.zxing', name: 'core', version: '2.1'
	
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }
	
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    // 这个可以选择生成refMap时用什么混淆
    defaultObfuscationEnv searge // searge或者notch.
    // Sets the main sourceSets refmap name instead of add sourceSets.main so there is no conflict cause of it adding another value instead of setting the 1 value.
    sourceSets {
        main {
            ext.refMap = 'mixins.loli.refmap.json'
        }
    }
}


jar {
    manifest.attributes(
            "MixinConfigs": "mixins.theresa.json",
            "tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
            "TweakOrder": 0,
            "FMLCorePluginContainsFMLMod": 'cn.loli.client.injection.MixinLoader',
            'FMLCorePlugin': 'cn.loli.client.injection.MixinLoaderPlugin'
    )
}

idea {
    module {
        inheritOutputDirs = true
    }
}
shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.google.zxing:core'))
		include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
    }

    exclude 'dummyThing'
    exclude 'LICENSE.txt'

    classifier = ""
}

reobf { shadowJar { mappingType = "SEARGE" } }
tasks.reobfShadowJar.mustRunAfter shadowJar

configurations {
    external
    compile.extendsFrom external
}

build.dependsOn shadowJar