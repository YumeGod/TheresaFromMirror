package cn.loli.client.module.modules.renderimport cn.loli.client.Mainimport cn.loli.client.events.KeyEventimport cn.loli.client.events.Render2DEventimport cn.loli.client.module.Moduleimport cn.loli.client.module.ModuleCategoryimport cn.loli.client.utils.Translateimport cn.loli.client.utils.render.RenderUtilsimport com.darkmagician6.eventapi.EventTargetimport net.minecraft.client.Minecraftimport net.minecraft.client.renderer.GlStateManagerimport org.lwjgl.input.Keyboardimport org.lwjgl.opengl.GL11import java.awt.Colorclass Tabgui : Module("TabGui", "tabgui.", ModuleCategory.RENDER) {    private val x = 5f    private val y = 50f    private val width = 75f    private val height = 78f*2    private var openModuleGui = false    private var selectedCategory = 0    private var selecteModuleindex = 0    private var selecteModule = emptyList<Module>()    private var Modulecategory = mutableListOf<AnimaitonCategory>()    private val categoryAnimaiton = Translate(0f, 0f)    private val moduleAnimaiton = Translate(0f, 0f)    private var categoryPositonY = 0f    private var ModulePositonY = 0f    init {        for (index in 0..ModuleCategory.values().lastIndex) {            val animationcategory = AnimaitonCategory(ModuleCategory.values()[index].name, Translate(0f, 0f))            Modulecategory.add(animationcategory)        }    }    @EventTarget    fun rendertabGui(evnet: Render2DEvent) {        enabler()        enablerScissorBox()        categoryAnimaiton.translate(0f, selectedCategory * 15f, 2.0)        val subcategory = if (categoryAnimaiton.y - 60f > 0) categoryAnimaiton.y - 60f else 0f        RenderUtils.drawRoundedRect(            x,            y + categoryAnimaiton.y - subcategory,            width,            17f, 2f,            Color(255, 255, 255, 150).rgb        )        categoryPositonY = 0f        Modulecategory.forEachIndexed { index, category ->            category.animation.translate(if (selectedCategory == index) 15f else 5f, 0f, 2.0)            Main.INSTANCE.fontLoaders.get("roboto16").drawString(                category.displayname,                x + category.animation.x,                y + 5f + categoryPositonY - subcategory,                -1            )            categoryPositonY += 15f        }        disablerScissorBox()        disabler()        enabler()        moduleAnimaiton.translate(0f, selecteModuleindex * 15f, 2.0)        val supermodel = if (moduleAnimaiton.y - 150f > 0) moduleAnimaiton.y - 150f else 0f        val positions = (if (ModulePositonY >= 165) 165f else ModulePositonY)        RenderUtils.doGlScissor(x + width + 10, y, width + width + 15, positions)        if (openModuleGui) {            RenderUtils.drawRoundedRect(                x + width + 10,                y,                width + 15,                positions, 2f,                Color(25, 25, 25, 100).rgb            )            RenderUtils.drawRoundedRect(                x + width + 10,                y + moduleAnimaiton.y - supermodel,                width + 15,                17f, 2f,                Color(255, 255, 255, 150).rgb            )        }else{            selecteModule.forEachIndexed { index, module ->                module.getabguitranslate().x = -10f;            }        }        GL11.glEnable(GL11.GL_SCISSOR_TEST)        ModulePositonY = 0f        selecteModule.forEachIndexed { index, module ->            module.getabguitranslate().translate(if (selecteModuleindex == index) 15f else 5f, 0f, 2.0)            Main.INSTANCE.fontLoaders.get("roboto16").drawString(                module.name,                x + width + 10 + module.getabguitranslate().x,                y + 5f + ModulePositonY - supermodel,                if (module.state) Color(255, 255, 255).rgb else Color(200, 200, 200).rgb            )            ModulePositonY += 15f        }        GL11.glDisable(GL11.GL_SCISSOR_TEST)        disabler()    }    private fun enablerScissorBox() {        RenderUtils.doGlScissor(x, y, width, 75f)        GL11.glEnable(GL11.GL_SCISSOR_TEST)        RenderUtils.drawRoundedRect(x, y, width, 75f, 2f, Color(25, 25, 25, 100).rgb)    }    private fun disablerScissorBox() {        GL11.glDisable(GL11.GL_SCISSOR_TEST)    }    private fun enabler() {        GlStateManager.pushMatrix()    }    private fun disabler() {        GlStateManager.popMatrix()    }    @EventTarget    fun keyevent(event: KeyEvent) {        val key = event.key        handleKey(key)    }    private fun handleKey(keyCode: Int) {        when (keyCode) {            Keyboard.KEY_UP -> {                parseAction(Action.UP)            }            Keyboard.KEY_DOWN -> {                parseAction(Action.DOWN)            }            Keyboard.KEY_LEFT -> {                parseAction(Action.LEFT)            }            Keyboard.KEY_RIGHT -> {                parseAction(Action.RIGHT)            }            Keyboard.KEY_RETURN -> {                parseAction(Action.TOGGLE)            }        }    }    private fun parseAction(action: Action) {        when (action) {            Action.UP -> {                if (selectedCategory > 0 && !openModuleGui) selectedCategory--                if (selecteModuleindex > 0) selecteModuleindex--            }            Action.DOWN -> {                if (selectedCategory < Modulecategory.lastIndex && !openModuleGui) selectedCategory++                if (selecteModuleindex < selecteModule.lastIndex) selecteModuleindex++            }            Action.LEFT -> {                if (openModuleGui) {                    openModuleGui = false                    selecteModuleindex = 0                    selecteModule = listOf()                }            }            Action.RIGHT -> {                if (!openModuleGui) {                    openModuleGui = true                    selecteModule =                        Main.INSTANCE.moduleManager.modules.filter { it.category == ModuleCategory.values()[selectedCategory] }                            .sortedBy { 0 }                }            }            Action.TOGGLE -> {                if (openModuleGui) {                    val selected = selecteModule[selecteModuleindex]                    selected.state = !selected.state                }            }        }    }    /**     * TabGUI Action     */    enum class Action { UP, DOWN, LEFT, RIGHT, TOGGLE }    class AnimaitonCategory(var displayname: String, var animation: Translate)}